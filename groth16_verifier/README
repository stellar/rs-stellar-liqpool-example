# Groth16 Verifier Contract

This is a demonstration of a Groth16 verifier. 

The proof and verification key are generated by following the example in Circom2 [getting-started guide](https://docs.circom.io/getting-started/).

The computation is `a * b = c` , where `a` and `b` are private inputs and `c` is the public output -- as simple as it gets. 

The `./data` directory contains all input files (circuit definition, inputs), as well as all outputs generated by following the steps. The only files relevant for proof verification is the [proof](./data/multiplier2_js/proof.json) as well as the [verification key](./data/multiplier2_js/verification_key.json).

The [contract implementation](./src/lib.rs) is translated from the auto-generated [solidity contract](./data/multiplier2_js/verifier.sol). The [test case](./src/test.rs) mimics the off-chain parsing of the proof and verification key and calling the contract with success. 


## ⚠️ WARNING: Demonstration Use Only

**This project is for demonstration purposes only.**  
- It has **not** undergone security auditing.  
- It is **not** safe for use in production environments.  

**Use at your own risk.**